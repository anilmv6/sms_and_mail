buildscript {
    ext {
        springBootVersion = '2.1.0.RELEASE'
    }
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id "org.flywaydb.flyway" version "5.2.4"
    id "org.springframework.boot" version "2.0.0.RELEASE"
    id "org.ajoberstar.grgit" version "2.2.1"
    id 'net.ltgt.apt' version '0.15'

}
import org.ajoberstar.grgit.Grgit
import org.ajoberstar.grgit.Credentials

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

//apply from: 'models.gradle'
apply from: 'gradle/ui.gradle'

group = 'com.gympro'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/milestone" }
    maven {url "https://jitpack.io"}
}


ext {
    springCloudVersion = 'Greenwich.M3'
    queryDslVersion = '3.6.3'
    javaGeneratedSources = file("$project.rootDir/src/main/javaGen")
    mapstructVersion = "1.3.0.Final"
}

sourceSets.main.java.srcDirs+='src/main/javaGen'

clean {
    delete "${project.rootDir}/src/main/javaGen"
}


compileJava {
    doFirst {
        javaGeneratedSources.mkdirs()
    }
        options.compilerArgs += [
            '-parameters', '-s', javaGeneratedSources
    ]
    aptOptions.processors = ['com.mysema.query.apt.jpa.JPAAnnotationProcessor',
                             'lombok.launch.AnnotationProcessorHider$AnnotationProcessor', 'org.mapstruct.ap.MappingProcessor']
}

dependencies {
    //spring
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.cloud:spring-cloud-starter')
    implementation('org.springframework.cloud:spring-cloud-starter-oauth2')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
     implementation('org.springframework.boot:spring-boot-starter-mail')

    //swagger
    implementation "io.springfox:springfox-swagger2:2.9.2"
    implementation "io.springfox:springfox-swagger-ui:2.9.2"

    //db
    implementation group: 'mysql', name: 'mysql-connector-java', version: '5.1.47'
    implementation "org.flywaydb:flyway-core:5.2.4"
    apt "org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final"


    //lombok
    implementation group: 'org.projectlombok', name: 'lombok', version: '1.18.6'
    apt "org.projectlombok:lombok"

    //querydsl
    implementation "com.mysema.querydsl:querydsl-jpa:$queryDslVersion"
    apt "com.mysema.querydsl:querydsl-apt:$queryDslVersion"

    //mapstruct
    compileOnly "org.mapstruct:mapstruct-jdk8:${mapstructVersion}"
    compile "org.mapstruct:mapstruct:${mapstructVersion}"
    apt "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    testImplementation('org.springframework.boot:spring-boot-starter-test')
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

//compileJava {
//    doFirst {
//        javaGeneratedSources.mkdirs()
//    }
//    options.compilerArgs += [
//            '-parameters', '-s', javaGeneratedSources, '-Amapstruct.suppressGeneratorTimestamp=true'
//    ]
//}


task clone {
    doLast {
        def binDir = new File('gym-client')
        binDir.deleteDir()
        Grgit.clone(dir: file('gym-client/'), uri: "https://$gitUser@bitbucket.org/$gitUser/ui.git",
                credentials: new Credentials(gitUser, gitPassword))
    }
}

task checkoutBranch(type: Exec) {
    workingDir 'gym-client'
    commandLine "git", "checkout", "$gitUiBranch"
    standardOutput = new ByteArrayOutputStream()
    ext.output = {
        return standardOutput.toString()
    }
}


clone.finalizedBy(checkoutBranch)

task installUi(type: Exec) {
    workingDir 'gym-client'
    commandLine "npm", "install"
    standardOutput = new ByteArrayOutputStream()
    ext.output = {
        return standardOutput.toString()
    }
}

task buildUi(type: Exec, dependsOn: installUi) {
    workingDir 'gym-client'
    commandLine "npm", "run-script", "build"
    standardOutput = new ByteArrayOutputStream()
    ext.output = {
        return standardOutput.toString()
    }
}

task copyUiResources(type: Copy, dependsOn: buildUi) {

    from 'gym-client/dist/'
    into 'src/main/resources/static'
    doFirst {
        def binDir = new File('src/main/resources/static')
        binDir.deleteDir()
    }
}

task startFull(dependsOn: copyUiResources) {
    doFirst {
        println '---------starting-------'
    }
}

task cleanUi(type: Delete) {
    delete 'gym-client'
}

startFull.finalizedBy(bootRun)

compileJava.dependsOn clean
